{
  // compilerOptions 配置编译选选项
  "compilerOptions": {
    "moduleResolution": "node", // 模块解析策略，ts默认使用node的方式解析，即相对引入方式。还可以是AMD,UMD,ES6
    "target": "es5", // 目标语言的版本，要将Ts编译成哪个版本的JS
    "module":"es2015", // 生成代码的模板标准
    "lib": ["es2015", "es2016", "es2017", "dom"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "strict": false,  // 开启所有严格的类型检查，其中就包括之前学到的--strictNullChecks(是否可以将null/undefined赋值给其他类型的变量)
    "sourceMap": true,  // 打包时是否给编译后得到的JS文件生成sourceMap文件 ？这个不应该是在打包工具配置项里吗
    "declaration": true, // 是否生成声明文件，也就是xx.d.ts
    "declarationDir": "dist/types", // 打包后声明文件的所在目录
    "emitDeclarationOnly":false, // 只生成声明文件不生成JS文件
    "allowSyntheticDefaultImports": true, // 
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "outDir": "dist/lib", // 打包编译后JS文件的输出目录
    "typeRoots": [
      "node_modules/@types" // 声明文件目录 默认就是node_modules/@types
    ]
  },
  "include": [
    "src" // 只会编译src目录下的所有文件
    // /src/* 只会编译src一级目录下的文件
    // /src/*/* 只会编译src二级目录下的文件，不包括一级目录，只有满足这样路径的才可以
  ],
}
